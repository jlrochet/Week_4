lapply(mtcars, function(whatever) whatever[mean(mtcars)])
lapply(mtcars, function(whatever) whatever[,1])
lapply(mtcars, function(whatever) whatever[1])
lapply(mtcars, function(whatever) whatever[1,3])
mtcars2 <- unclass(mtcars)
mtcars2
rm(list=ls())
?gl
factor_eg <- gl(10, 5)
factor_eg
factor_eg <- gl(10, c("Men", "Women"))
factor_eg <- gl(2, 10, labels = c("Men", "Women"))
factor_eg
unclass(factor_eg)
factor_eg
airquality
lapply(split(airquality, months))
lapply(split(airquality, airquality$months))
lapply(split(airquality, function(x) colmeans(airquality$months))
lapply(split(airquality, function(x) colMeans(airquality$months))
s <- split(airquality, airquality$Month)
lapply(split(airquality, function(x) colMeans(airquality$Month))
s
head(s)
lapply(s, function(x) colMeans(x))
lapply(s, function(x) colMeans(x[, c("Wind", "Temp", "Day")]))
weathercolmean <- lapply(s, function(x) colMeans(x[, c("Wind", "Temp", "Day")]))
weathercolmean
class(weathercolmean)
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind"]))
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
y <- sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
y
class(y)
ytable <- data.frame(y)
ytable
class(ytable)
y <- sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]), na.rm = TRUE)
y <- sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
y
mean(x)
traceback()
lm(y - x)
traceback
traceback()
lm(y - x)
traceback()
lm (y ~ x)
traceback()
debug(lm)
lm(y ~ x)
options(error = recover)
read.csv("nosuchfile")
2
3
stop
q
swirl()
rm(list=ls())
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
rm(list=ls())
options()
options(error = )
options(error = FALSE)
?options
getOption("error")
options(error = NULL)
options(weasdf)
library(datasets)
data("iris")
head(iris)
summary(iris)
iris
dim(iris)
?iris
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
apply(iris[,1:4], 1, mean)
apply(iris, 2, mean)
apply(iris[,1:4], 2, mean)
?apply
data(mtcars)
?mtcars
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?abs
tapply(mtcars$hp, mtcars$hp[4], mean)
tapply(mtcars$hp, mtcars$cyl[4], mean)
tapply(mtcars$hp, mtcars$cyl = 4, mean)
tapply(mtcars$hp, mtcars["cyl"] = 4, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
hp_cyl <- tapply(mtcars$hp, mtcars$cyl, mean)
hp_cyl
abs(hp_cyl[2] - hp_cyl[3])
209.214 - 122.2857
debug(ls)
ls()
?with
apply(iris, 2, mean)
?<<-
a <- b <- c <- 6
a <<- 6
a <<- 10
makeMean <- function(x = numeric()) {
originalNum <<- x
meanX <- mean(x)
return(meanX)
}
makeMean(1:300)
originalNum
rm(list=ls())
# RDPeng's example
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(1:300)
cachemean(1:300)
rm(list=ls())
# RDPeng's example
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector()
cachemean()
cachemean(1:300)
x <- 5
y <- function() x
y()
y <- function() mean(x)
y()
x <- 1:300
y()
z <- makeVector(x)
zee <- cachemean(z)
z
zee
y <- 1:500
cachemean(y)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list (set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list (set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
x <- matrix(1:4, 2, 2)
x
solve(x)
xinv <- solve(x)
x %*% xinv
identity2x2 <- x %*% xinv
identity2x2
makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message ("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cachemtx <- makeCacheMatrix(x)
cacheSolve(cachemtx)
x %*% cachemtx
x %*% cacheSolve(cachemtx)
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
mtx <- NULL
#        set <- function(y) {
#                x <<- y
#                mtx <<- NULL
#        }
get <- function() x
setsolve <- function(solve) mtx <<- solve
getsolve <- function() mtx
list (get = get, setsolve = setsolve, getsolve = getsolve)
}
x <- matrix(1:4, 2, 2)
xccache <- makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
mtx <- x$getsolve()
if(!is.null(mtx)) {
message ("retrieving cached data")
return(mtx)
}
data <- x$get()
mtx <- solve(data, ...)
x$setsolve(mtx)
mtx
}
cacheSolve(xccache)
solution <- cacheSolve(xccache)
solution
## Created by jlrochet on 6-8-2016
## This code closely follows Prof. Peng's example on Coursera
## These two functions work together to solve for the inverse of a matrix
## makeCacheMatrix stores the matrix information in a list for caching
## I eliminated the "set" function from the example code because it doesn't seem
## to do anything in either function...
makeCacheMatrix <- function(x = matrix()) {
mtx <- NULL
get <- function() x
setsolve <- function(solve) mtx <<- solve
getsolve <- function() mtx
list (get = get, setsolve = setsolve, getsolve = getsolve)
}
## cacheSolve returns the cached inverse matrix or calculates
## the inverse matrix absent a cached version
cacheSolve <- function(x, ...) {
mtx <- x$getsolve()
if(!is.null(mtx)) {
message ("retrieving cached data...")
return(mtx)
}
data <- x$get()
mtx <- solve(data, ...)
x$setsolve(mtx)
mtx
}
x <- matrix(1:9, 3, 3)
xinv <- solve(x)
x <- matrix(9:1, 3, 3)
xinv <- solve(x)
x <- matrix(1:16, 4, 4)
xinv <- solve(x)
x <- matrix(c(3,5,8,3,2,7,3,7,3), 3, 3)
xinv <- solve(x)
identitymtx<- x %*% xinv
identitymtx
round(identitymtx)
makeCacheMatrix(x)
z <- makeCacheMatrix(x)
z
cacheSolve(z)
xinvfunc <- cacheSolve(z)
x %*% xinvfunc
identity2 <- x %*% xinvfunc
round(identity2)
rm(list=ls())
?str
str(mtcars)
x <- str(mtcars)
x
rm(x)
x <- 1:343
y <- 1:200
z <- 3:450
list(x=x, y=y, z=z)
xyz <- list(x=x, y=y, z=z)
a <- 3:323
b <- 4:433
c <- c(TRUE, FALSE)
abc <- list(c(a, b, c))
abc <- list(a=a, b=b, c=c)
abc
abc_xyz <- list(abc=abc, xyz=xyz)
abc_xyz
str(abc_xyz)
str(lm)
str(airquality)
library(magrittr)
airquality %>% split(Month) %>% s
airquality %>% split(airquality$Month) %>% s
airquality %>% split(airquality$Month) -> s
str(s)
head(s)
head(s, 1)
rm(list=ls)
rm(list=ls())
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2*x + e
str(y)
summary(y)
plot(x,y)
lm(y ~ x)
set.seed(1)
sample(1:10, 4)
sample(1:10, 4)
sample(letters, 5)
sample(1:10)
sample(1:10)
sample(1:10, replace = TRUE)
Rprof()
lm(y)
Rprof(lm(y~x))
Rprof()
lm(y~x)
set.seed(1)
rpois
rpois(5, 2)
?rep
rep(0:1, each = 5)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2*x + e
y
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
y = 234234
rm(y)
x1 <- 1:300
x2 <- 301:600
Rprof()
fit <- lm(y ~ x1 + x2)
y <- 50 + 2*x1 + 0.5*x2
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
rm(list=ls())
swirl()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace )
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
letters
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinoms(100, size = 1, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5, 10))
my_popis
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab = )
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab = "Speed")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
?par
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
?knittr
library(knitr)
?knitr
getwd()
setwd("/Users/JLR/Documents/Coursera/Programming in R/Week 4")
list.files()
list.files()
rm(list=ls())
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
dim(outcome)
summary(outcome)
str(character)
str(outcome)
head(outcome, 1)
table(head(outcome))
head(table(outcome))
names(outcome)
dim(outcome)
View(outcome)
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
rm(list=ls())
